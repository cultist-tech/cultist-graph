// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Statistic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenTotal", Value.fromI32(0));
    this.set("marketSaleTotal", Value.fromI32(0));
    this.set("marketRentTotal", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Statistic entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Statistic entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Statistic", id.toString(), this);
    }
  }

  static load(id: string): Statistic | null {
    return changetype<Statistic | null>(store.get("Statistic", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenTotal(): i32 {
    let value = this.get("tokenTotal");
    return value!.toI32();
  }

  set tokenTotal(value: i32) {
    this.set("tokenTotal", Value.fromI32(value));
  }

  get marketSaleTotal(): i32 {
    let value = this.get("marketSaleTotal");
    return value!.toI32();
  }

  set marketSaleTotal(value: i32) {
    this.set("marketSaleTotal", Value.fromI32(value));
  }

  get marketRentTotal(): i32 {
    let value = this.get("marketRentTotal");
    return value!.toI32();
  }

  set marketRentTotal(value: i32) {
    this.set("marketRentTotal", Value.fromI32(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromString(""));
    this.set("ownerId", Value.fromString(""));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get rarity(): i32 {
    let value = this.get("rarity");
    return value!.toI32();
  }

  set rarity(value: i32) {
    this.set("rarity", Value.fromI32(value));
  }

  get bindToOwner(): boolean {
    let value = this.get("bindToOwner");
    return value!.toBoolean();
  }

  set bindToOwner(value: boolean) {
    this.set("bindToOwner", Value.fromBoolean(value));
  }

  get ownerId(): string {
    let value = this.get("ownerId");
    return value!.toString();
  }

  set ownerId(value: string) {
    this.set("ownerId", Value.fromString(value));
  }

  get tokenMetadataId(): string | null {
    let value = this.get("tokenMetadataId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenMetadataId(value: string | null) {
    if (!value) {
      this.unset("tokenMetadataId");
    } else {
      this.set("tokenMetadataId", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenMetadata(): string | null {
    let value = this.get("tokenMetadata");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenMetadata(value: string | null) {
    if (!value) {
      this.unset("tokenMetadata");
    } else {
      this.set("tokenMetadata", Value.fromString(<string>value));
    }
  }

  get royalty(): Array<string> {
    let value = this.get("royalty");
    return value!.toStringArray();
  }

  set royalty(value: Array<string>) {
    this.set("royalty", Value.fromStringArray(value));
  }
}

export class TokenMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenMetadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenMetadata", id.toString(), this);
    }
  }

  static load(id: string): TokenMetadata | null {
    return changetype<TokenMetadata | null>(store.get("TokenMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get decsription(): string | null {
    let value = this.get("decsription");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set decsription(value: string | null) {
    if (!value) {
      this.unset("decsription");
    } else {
      this.set("decsription", Value.fromString(<string>value));
    }
  }

  get media(): string | null {
    let value = this.get("media");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set media(value: string | null) {
    if (!value) {
      this.unset("media");
    } else {
      this.set("media", Value.fromString(<string>value));
    }
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }
}

export class TokenRoyalty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromString(""));
    this.set("accountId", Value.fromString(""));
    this.set("value", Value.fromI32(0));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenRoyalty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenRoyalty entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenRoyalty", id.toString(), this);
    }
  }

  static load(id: string): TokenRoyalty | null {
    return changetype<TokenRoyalty | null>(store.get("TokenRoyalty", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get accountId(): string {
    let value = this.get("accountId");
    return value!.toString();
  }

  set accountId(value: string) {
    this.set("accountId", Value.fromString(value));
  }

  get value(): i32 {
    let value = this.get("value");
    return value!.toI32();
  }

  set value(value: i32) {
    this.set("value", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class MarketRent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("tokenId", Value.fromString(""));
    this.set("ownerId", Value.fromString(""));
    this.set("minTime", Value.fromI32(0));
    this.set("maxTime", Value.fromI32(0));
    this.set("createdAt", Value.fromI32(0));
    this.set("owner", Value.fromString(""));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketRent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketRent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketRent", id.toString(), this);
    }
  }

  static load(id: string): MarketRent | null {
    return changetype<MarketRent | null>(store.get("MarketRent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get ownerId(): string {
    let value = this.get("ownerId");
    return value!.toString();
  }

  set ownerId(value: string) {
    this.set("ownerId", Value.fromString(value));
  }

  get minTime(): i32 {
    let value = this.get("minTime");
    return value!.toI32();
  }

  set minTime(value: i32) {
    this.set("minTime", Value.fromI32(value));
  }

  get maxTime(): i32 {
    let value = this.get("maxTime");
    return value!.toI32();
  }

  set maxTime(value: i32) {
    this.set("maxTime", Value.fromI32(value));
  }

  get endedAt(): i32 {
    let value = this.get("endedAt");
    return value!.toI32();
  }

  set endedAt(value: i32) {
    this.set("endedAt", Value.fromI32(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get renterId(): string | null {
    let value = this.get("renterId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set renterId(value: string | null) {
    if (!value) {
      this.unset("renterId");
    } else {
      this.set("renterId", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get conditions(): Array<string> {
    let value = this.get("conditions");
    return value!.toStringArray();
  }

  set conditions(value: Array<string>) {
    this.set("conditions", Value.fromStringArray(value));
  }
}

export class MarketRentCondition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ftTokenId", Value.fromString(""));
    this.set("price", Value.fromString(""));
    this.set("rent", Value.fromString(""));
    this.set("rentId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketRentCondition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketRentCondition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketRentCondition", id.toString(), this);
    }
  }

  static load(id: string): MarketRentCondition | null {
    return changetype<MarketRentCondition | null>(
      store.get("MarketRentCondition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ftTokenId(): string {
    let value = this.get("ftTokenId");
    return value!.toString();
  }

  set ftTokenId(value: string) {
    this.set("ftTokenId", Value.fromString(value));
  }

  get price(): string {
    let value = this.get("price");
    return value!.toString();
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get rent(): string {
    let value = this.get("rent");
    return value!.toString();
  }

  set rent(value: string) {
    this.set("rent", Value.fromString(value));
  }

  get rentId(): string {
    let value = this.get("rentId");
    return value!.toString();
  }

  set rentId(value: string) {
    this.set("rentId", Value.fromString(value));
  }
}

export class MarketSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ownerId", Value.fromString(""));
    this.set("contractId", Value.fromString(""));
    this.set("tokenId", Value.fromString(""));
    this.set("isAuction", Value.fromBoolean(false));
    this.set("createdAt", Value.fromI32(0));
    this.set("owner", Value.fromString(""));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketSale entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketSale", id.toString(), this);
    }
  }

  static load(id: string): MarketSale | null {
    return changetype<MarketSale | null>(store.get("MarketSale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerId(): string {
    let value = this.get("ownerId");
    return value!.toString();
  }

  set ownerId(value: string) {
    this.set("ownerId", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get isAuction(): boolean {
    let value = this.get("isAuction");
    return value!.toBoolean();
  }

  set isAuction(value: boolean) {
    this.set("isAuction", Value.fromBoolean(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get conditions(): Array<string> {
    let value = this.get("conditions");
    return value!.toStringArray();
  }

  set conditions(value: Array<string>) {
    this.set("conditions", Value.fromStringArray(value));
  }
}

export class MarketSaleCondition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ftTokenId", Value.fromString(""));
    this.set("price", Value.fromString(""));
    this.set("sale", Value.fromString(""));
    this.set("saleId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketSaleCondition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketSaleCondition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketSaleCondition", id.toString(), this);
    }
  }

  static load(id: string): MarketSaleCondition | null {
    return changetype<MarketSaleCondition | null>(
      store.get("MarketSaleCondition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ftTokenId(): string {
    let value = this.get("ftTokenId");
    return value!.toString();
  }

  set ftTokenId(value: string) {
    this.set("ftTokenId", Value.fromString(value));
  }

  get price(): string {
    let value = this.get("price");
    return value!.toString();
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get sale(): string {
    let value = this.get("sale");
    return value!.toString();
  }

  set sale(value: string) {
    this.set("sale", Value.fromString(value));
  }

  get saleId(): string {
    let value = this.get("saleId");
    return value!.toString();
  }

  set saleId(value: string) {
    this.set("saleId", Value.fromString(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get marketSales(): Array<string> {
    let value = this.get("marketSales");
    return value!.toStringArray();
  }

  set marketSales(value: Array<string>) {
    this.set("marketSales", Value.fromStringArray(value));
  }

  get marketRents(): Array<string> {
    let value = this.get("marketRents");
    return value!.toStringArray();
  }

  set marketRents(value: Array<string>) {
    this.set("marketRents", Value.fromStringArray(value));
  }
}

export class FtBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("accountId", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FtBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FtBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FtBalance", id.toString(), this);
    }
  }

  static load(id: string): FtBalance | null {
    return changetype<FtBalance | null>(store.get("FtBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get accountId(): string {
    let value = this.get("accountId");
    return value!.toString();
  }

  set accountId(value: string) {
    this.set("accountId", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}
