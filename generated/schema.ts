// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Statistic extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("nftTransferTotal", Value.fromI32(0));
    this.set("nftPayTotal", Value.fromI32(0));
    this.set("nftBurnTotal", Value.fromI32(0));
    this.set("nftTotal", Value.fromI32(0));
    this.set("marketSaleTotal", Value.fromI32(0));
    this.set("marketSaleNearFloor", Value.fromString(""));
    this.set("marketSaleNearSum", Value.fromString(""));
    this.set("marketSaleNearTotal", Value.fromI32(0));
    this.set("marketRentTotal", Value.fromI32(0));
    this.set("marketRentNearFloor", Value.fromString(""));
    this.set("marketRentNearSum", Value.fromString(""));
    this.set("marketRentNearTotal", Value.fromI32(0));
    this.set("accountTotal", Value.fromI32(0));
    this.set("transactionTotal", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Statistic entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Statistic entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Statistic", id.toString(), this);
    }
  }

  static load(id: string): Statistic | null {
    return changetype<Statistic | null>(store.get("Statistic", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftTransferTotal(): i32 {
    let value = this.get("nftTransferTotal");
    return value!.toI32();
  }

  set nftTransferTotal(value: i32) {
    this.set("nftTransferTotal", Value.fromI32(value));
  }

  get nftPayTotal(): i32 {
    let value = this.get("nftPayTotal");
    return value!.toI32();
  }

  set nftPayTotal(value: i32) {
    this.set("nftPayTotal", Value.fromI32(value));
  }

  get nftBurnTotal(): i32 {
    let value = this.get("nftBurnTotal");
    return value!.toI32();
  }

  set nftBurnTotal(value: i32) {
    this.set("nftBurnTotal", Value.fromI32(value));
  }

  get nftTotal(): i32 {
    let value = this.get("nftTotal");
    return value!.toI32();
  }

  set nftTotal(value: i32) {
    this.set("nftTotal", Value.fromI32(value));
  }

  get marketSaleTotal(): i32 {
    let value = this.get("marketSaleTotal");
    return value!.toI32();
  }

  set marketSaleTotal(value: i32) {
    this.set("marketSaleTotal", Value.fromI32(value));
  }

  get marketSaleNearFloor(): string {
    let value = this.get("marketSaleNearFloor");
    return value!.toString();
  }

  set marketSaleNearFloor(value: string) {
    this.set("marketSaleNearFloor", Value.fromString(value));
  }

  get marketSaleNearSum(): string {
    let value = this.get("marketSaleNearSum");
    return value!.toString();
  }

  set marketSaleNearSum(value: string) {
    this.set("marketSaleNearSum", Value.fromString(value));
  }

  get marketSaleNearTotal(): i32 {
    let value = this.get("marketSaleNearTotal");
    return value!.toI32();
  }

  set marketSaleNearTotal(value: i32) {
    this.set("marketSaleNearTotal", Value.fromI32(value));
  }

  get marketRentTotal(): i32 {
    let value = this.get("marketRentTotal");
    return value!.toI32();
  }

  set marketRentTotal(value: i32) {
    this.set("marketRentTotal", Value.fromI32(value));
  }

  get marketRentNearFloor(): string {
    let value = this.get("marketRentNearFloor");
    return value!.toString();
  }

  set marketRentNearFloor(value: string) {
    this.set("marketRentNearFloor", Value.fromString(value));
  }

  get marketRentNearSum(): string {
    let value = this.get("marketRentNearSum");
    return value!.toString();
  }

  set marketRentNearSum(value: string) {
    this.set("marketRentNearSum", Value.fromString(value));
  }

  get marketRentNearTotal(): i32 {
    let value = this.get("marketRentNearTotal");
    return value!.toI32();
  }

  set marketRentNearTotal(value: i32) {
    this.set("marketRentNearTotal", Value.fromI32(value));
  }

  get accountTotal(): i32 {
    let value = this.get("accountTotal");
    return value!.toI32();
  }

  set accountTotal(value: i32) {
    this.set("accountTotal", Value.fromI32(value));
  }

  get transactionTotal(): i32 {
    let value = this.get("transactionTotal");
    return value!.toI32();
  }

  set transactionTotal(value: i32) {
    this.set("transactionTotal", Value.fromI32(value));
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Account entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Account", id.toString(), this);
    }
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }

  get marketSales(): Array<string> {
    let value = this.get("marketSales");
    return value!.toStringArray();
  }

  set marketSales(value: Array<string>) {
    this.set("marketSales", Value.fromStringArray(value));
  }

  get marketRents(): Array<string> {
    let value = this.get("marketRents");
    return value!.toStringArray();
  }

  set marketRents(value: Array<string>) {
    this.set("marketRents", Value.fromStringArray(value));
  }

  get ftBalances(): Array<string> {
    let value = this.get("ftBalances");
    return value!.toStringArray();
  }

  set ftBalances(value: Array<string>) {
    this.set("ftBalances", Value.fromStringArray(value));
  }
}

export class AccountRoyalty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("accountId", Value.fromString(""));
    this.set("account", Value.fromString(""));
    this.set("ftTokenId", Value.fromString(""));
    this.set("amount", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AccountRoyalty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AccountRoyalty entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AccountRoyalty", id.toString(), this);
    }
  }

  static load(id: string): AccountRoyalty | null {
    return changetype<AccountRoyalty | null>(store.get("AccountRoyalty", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get accountId(): string {
    let value = this.get("accountId");
    return value!.toString();
  }

  set accountId(value: string) {
    this.set("accountId", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }

  get ftTokenId(): string {
    let value = this.get("ftTokenId");
    return value!.toString();
  }

  set ftTokenId(value: string) {
    this.set("ftTokenId", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value!.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }
}

export class NftContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NftContract entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NftContract", id.toString(), this);
    }
  }

  static load(id: string): NftContract | null {
    return changetype<NftContract | null>(store.get("NftContract", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }
}

export class Token extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromString(""));
    this.set("createdAt", Value.fromI32(0));
    this.set("ownerId", Value.fromString(""));
    this.set("tokenMetadataId", Value.fromString(""));
    this.set("owner", Value.fromString(""));
    this.set("tokenMetadata", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Token entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Token", id.toString(), this);
    }
  }

  static load(id: string): Token | null {
    return changetype<Token | null>(store.get("Token", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get rarity(): i32 {
    let value = this.get("rarity");
    return value!.toI32();
  }

  set rarity(value: i32) {
    this.set("rarity", Value.fromI32(value));
  }

  get bindToOwner(): boolean {
    let value = this.get("bindToOwner");
    return value!.toBoolean();
  }

  set bindToOwner(value: boolean) {
    this.set("bindToOwner", Value.fromBoolean(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get revealAt(): i32 {
    let value = this.get("revealAt");
    return value!.toI32();
  }

  set revealAt(value: i32) {
    this.set("revealAt", Value.fromI32(value));
  }

  get ownerId(): string {
    let value = this.get("ownerId");
    return value!.toString();
  }

  set ownerId(value: string) {
    this.set("ownerId", Value.fromString(value));
  }

  get tokenMetadataId(): string {
    let value = this.get("tokenMetadataId");
    return value!.toString();
  }

  set tokenMetadataId(value: string) {
    this.set("tokenMetadataId", Value.fromString(value));
  }

  get rentId(): string | null {
    let value = this.get("rentId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rentId(value: string | null) {
    if (!value) {
      this.unset("rentId");
    } else {
      this.set("rentId", Value.fromString(<string>value));
    }
  }

  get saleId(): string | null {
    let value = this.get("saleId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set saleId(value: string | null) {
    if (!value) {
      this.unset("saleId");
    } else {
      this.set("saleId", Value.fromString(<string>value));
    }
  }

  get fractionationId(): string | null {
    let value = this.get("fractionationId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fractionationId(value: string | null) {
    if (!value) {
      this.unset("fractionationId");
    } else {
      this.set("fractionationId", Value.fromString(<string>value));
    }
  }

  get nftIdoId(): string | null {
    let value = this.get("nftIdoId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftIdoId(value: string | null) {
    if (!value) {
      this.unset("nftIdoId");
    } else {
      this.set("nftIdoId", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get tokenMetadata(): string {
    let value = this.get("tokenMetadata");
    return value!.toString();
  }

  set tokenMetadata(value: string) {
    this.set("tokenMetadata", Value.fromString(value));
  }

  get rent(): string | null {
    let value = this.get("rent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set rent(value: string | null) {
    if (!value) {
      this.unset("rent");
    } else {
      this.set("rent", Value.fromString(<string>value));
    }
  }

  get sale(): string | null {
    let value = this.get("sale");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set sale(value: string | null) {
    if (!value) {
      this.unset("sale");
    } else {
      this.set("sale", Value.fromString(<string>value));
    }
  }

  get fractionation(): string | null {
    let value = this.get("fractionation");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fractionation(value: string | null) {
    if (!value) {
      this.unset("fractionation");
    } else {
      this.set("fractionation", Value.fromString(<string>value));
    }
  }

  get nftIdo(): string | null {
    let value = this.get("nftIdo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftIdo(value: string | null) {
    if (!value) {
      this.unset("nftIdo");
    } else {
      this.set("nftIdo", Value.fromString(<string>value));
    }
  }

  get royalty(): Array<string> {
    let value = this.get("royalty");
    return value!.toStringArray();
  }

  set royalty(value: Array<string>) {
    this.set("royalty", Value.fromStringArray(value));
  }
}

export class TokenMetadata extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenMetadata entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenMetadata entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenMetadata", id.toString(), this);
    }
  }

  static load(id: string): TokenMetadata | null {
    return changetype<TokenMetadata | null>(store.get("TokenMetadata", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string | null {
    let value = this.get("title");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set title(value: string | null) {
    if (!value) {
      this.unset("title");
    } else {
      this.set("title", Value.fromString(<string>value));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (!value) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(<string>value));
    }
  }

  get media(): string | null {
    let value = this.get("media");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set media(value: string | null) {
    if (!value) {
      this.unset("media");
    } else {
      this.set("media", Value.fromString(<string>value));
    }
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }
}

export class TokenRoyalty extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromString(""));
    this.set("accountId", Value.fromString(""));
    this.set("value", Value.fromI32(0));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenRoyalty entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TokenRoyalty entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TokenRoyalty", id.toString(), this);
    }
  }

  static load(id: string): TokenRoyalty | null {
    return changetype<TokenRoyalty | null>(store.get("TokenRoyalty", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get accountId(): string {
    let value = this.get("accountId");
    return value!.toString();
  }

  set accountId(value: string) {
    this.set("accountId", Value.fromString(value));
  }

  get value(): i32 {
    let value = this.get("value");
    return value!.toI32();
  }

  set value(value: i32) {
    this.set("value", Value.fromI32(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }
}

export class MarketRent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("tokenId", Value.fromString(""));
    this.set("ownerId", Value.fromString(""));
    this.set("minTime", Value.fromI32(0));
    this.set("maxTime", Value.fromI32(0));
    this.set("createdAt", Value.fromI32(0));
    this.set("owner", Value.fromString(""));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketRent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketRent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketRent", id.toString(), this);
    }
  }

  static load(id: string): MarketRent | null {
    return changetype<MarketRent | null>(store.get("MarketRent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get ownerId(): string {
    let value = this.get("ownerId");
    return value!.toString();
  }

  set ownerId(value: string) {
    this.set("ownerId", Value.fromString(value));
  }

  get minTime(): i32 {
    let value = this.get("minTime");
    return value!.toI32();
  }

  set minTime(value: i32) {
    this.set("minTime", Value.fromI32(value));
  }

  get maxTime(): i32 {
    let value = this.get("maxTime");
    return value!.toI32();
  }

  set maxTime(value: i32) {
    this.set("maxTime", Value.fromI32(value));
  }

  get endedAt(): i32 {
    let value = this.get("endedAt");
    return value!.toI32();
  }

  set endedAt(value: i32) {
    this.set("endedAt", Value.fromI32(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get renterId(): string | null {
    let value = this.get("renterId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set renterId(value: string | null) {
    if (!value) {
      this.unset("renterId");
    } else {
      this.set("renterId", Value.fromString(<string>value));
    }
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get conditions(): Array<string> {
    let value = this.get("conditions");
    return value!.toStringArray();
  }

  set conditions(value: Array<string>) {
    this.set("conditions", Value.fromStringArray(value));
  }
}

export class MarketRentCondition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ftTokenId", Value.fromString(""));
    this.set("price", Value.fromString(""));
    this.set("rent", Value.fromString(""));
    this.set("rentId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketRentCondition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketRentCondition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketRentCondition", id.toString(), this);
    }
  }

  static load(id: string): MarketRentCondition | null {
    return changetype<MarketRentCondition | null>(
      store.get("MarketRentCondition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ftTokenId(): string {
    let value = this.get("ftTokenId");
    return value!.toString();
  }

  set ftTokenId(value: string) {
    this.set("ftTokenId", Value.fromString(value));
  }

  get price(): string {
    let value = this.get("price");
    return value!.toString();
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get rent(): string {
    let value = this.get("rent");
    return value!.toString();
  }

  set rent(value: string) {
    this.set("rent", Value.fromString(value));
  }

  get rentId(): string {
    let value = this.get("rentId");
    return value!.toString();
  }

  set rentId(value: string) {
    this.set("rentId", Value.fromString(value));
  }
}

export class MarketSale extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ownerId", Value.fromString(""));
    this.set("contractId", Value.fromString(""));
    this.set("tokenId", Value.fromString(""));
    this.set("isAuction", Value.fromBoolean(false));
    this.set("createdAt", Value.fromI32(0));
    this.set("owner", Value.fromString(""));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketSale entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketSale entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketSale", id.toString(), this);
    }
  }

  static load(id: string): MarketSale | null {
    return changetype<MarketSale | null>(store.get("MarketSale", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ownerId(): string {
    let value = this.get("ownerId");
    return value!.toString();
  }

  set ownerId(value: string) {
    this.set("ownerId", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get isAuction(): boolean {
    let value = this.get("isAuction");
    return value!.toBoolean();
  }

  set isAuction(value: boolean) {
    this.set("isAuction", Value.fromBoolean(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get conditions(): Array<string> {
    let value = this.get("conditions");
    return value!.toStringArray();
  }

  set conditions(value: Array<string>) {
    this.set("conditions", Value.fromStringArray(value));
  }
}

export class MarketSaleCondition extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("ftTokenId", Value.fromString(""));
    this.set("price", Value.fromString(""));
    this.set("sale", Value.fromString(""));
    this.set("saleId", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketSaleCondition entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save MarketSaleCondition entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("MarketSaleCondition", id.toString(), this);
    }
  }

  static load(id: string): MarketSaleCondition | null {
    return changetype<MarketSaleCondition | null>(
      store.get("MarketSaleCondition", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ftTokenId(): string {
    let value = this.get("ftTokenId");
    return value!.toString();
  }

  set ftTokenId(value: string) {
    this.set("ftTokenId", Value.fromString(value));
  }

  get price(): string {
    let value = this.get("price");
    return value!.toString();
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get sale(): string {
    let value = this.get("sale");
    return value!.toString();
  }

  set sale(value: string) {
    this.set("sale", Value.fromString(value));
  }

  get saleId(): string {
    let value = this.get("saleId");
    return value!.toString();
  }

  set saleId(value: string) {
    this.set("saleId", Value.fromString(value));
  }
}

export class FtBalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("accountId", Value.fromString(""));
    this.set("balance", Value.fromBigInt(BigInt.zero()));
    this.set("owner", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FtBalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FtBalance entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FtBalance", id.toString(), this);
    }
  }

  static load(id: string): FtBalance | null {
    return changetype<FtBalance | null>(store.get("FtBalance", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get accountId(): string {
    let value = this.get("accountId");
    return value!.toString();
  }

  set accountId(value: string) {
    this.set("accountId", Value.fromString(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value!.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }
}

export class NftIdo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("idoId", Value.fromString(""));
    this.set("contractId", Value.fromString(""));
    this.set("name", Value.fromString(""));
    this.set("price", Value.fromString(""));
    this.set("buyMax", Value.fromI32(0));
    this.set("perTransactionMin", Value.fromI32(0));
    this.set("perTransactionMax", Value.fromI32(0));
    this.set("amountReady", Value.fromI32(0));
    this.set("notMinted", Value.fromI32(0));
    this.set("locked", Value.fromBoolean(false));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftIdo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NftIdo entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NftIdo", id.toString(), this);
    }
  }

  static load(id: string): NftIdo | null {
    return changetype<NftIdo | null>(store.get("NftIdo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get idoId(): string {
    let value = this.get("idoId");
    return value!.toString();
  }

  set idoId(value: string) {
    this.set("idoId", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get media(): string | null {
    let value = this.get("media");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set media(value: string | null) {
    if (!value) {
      this.unset("media");
    } else {
      this.set("media", Value.fromString(<string>value));
    }
  }

  get amount(): i32 {
    let value = this.get("amount");
    return value!.toI32();
  }

  set amount(value: i32) {
    this.set("amount", Value.fromI32(value));
  }

  get price(): string {
    let value = this.get("price");
    return value!.toString();
  }

  set price(value: string) {
    this.set("price", Value.fromString(value));
  }

  get buyMax(): i32 {
    let value = this.get("buyMax");
    return value!.toI32();
  }

  set buyMax(value: i32) {
    this.set("buyMax", Value.fromI32(value));
  }

  get perTransactionMin(): i32 {
    let value = this.get("perTransactionMin");
    return value!.toI32();
  }

  set perTransactionMin(value: i32) {
    this.set("perTransactionMin", Value.fromI32(value));
  }

  get perTransactionMax(): i32 {
    let value = this.get("perTransactionMax");
    return value!.toI32();
  }

  set perTransactionMax(value: i32) {
    this.set("perTransactionMax", Value.fromI32(value));
  }

  get amountReady(): i32 {
    let value = this.get("amountReady");
    return value!.toI32();
  }

  set amountReady(value: i32) {
    this.set("amountReady", Value.fromI32(value));
  }

  get notMinted(): i32 {
    let value = this.get("notMinted");
    return value!.toI32();
  }

  set notMinted(value: i32) {
    this.set("notMinted", Value.fromI32(value));
  }

  get locked(): boolean {
    let value = this.get("locked");
    return value!.toBoolean();
  }

  set locked(value: boolean) {
    this.set("locked", Value.fromBoolean(value));
  }

  get startDate(): i32 {
    let value = this.get("startDate");
    return value!.toI32();
  }

  set startDate(value: i32) {
    this.set("startDate", Value.fromI32(value));
  }

  get ftToken(): string | null {
    let value = this.get("ftToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ftToken(value: string | null) {
    if (!value) {
      this.unset("ftToken");
    } else {
      this.set("ftToken", Value.fromString(<string>value));
    }
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class NftFractionation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("tokenId", Value.fromString(""));
    this.set("createdAt", Value.fromI32(0));
    this.set("token", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NftFractionation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save NftFractionation entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("NftFractionation", id.toString(), this);
    }
  }

  static load(id: string): NftFractionation | null {
    return changetype<NftFractionation | null>(
      store.get("NftFractionation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get tokenId(): string {
    let value = this.get("tokenId");
    return value!.toString();
  }

  set tokenId(value: string) {
    this.set("tokenId", Value.fromString(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get competedAt(): i32 {
    let value = this.get("competedAt");
    return value!.toI32();
  }

  set competedAt(value: i32) {
    this.set("competedAt", Value.fromI32(value));
  }

  get competedBy(): string | null {
    let value = this.get("competedBy");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set competedBy(value: string | null) {
    if (!value) {
      this.unset("competedBy");
    } else {
      this.set("competedBy", Value.fromString(<string>value));
    }
  }

  get token(): string {
    let value = this.get("token");
    return value!.toString();
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get tokens(): Array<string> {
    let value = this.get("tokens");
    return value!.toStringArray();
  }

  set tokens(value: Array<string>) {
    this.set("tokens", Value.fromStringArray(value));
  }
}

export class ReferralProgram extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("influencerId", Value.fromString(""));
    this.set("programId", Value.fromString(""));
    this.set("code", Value.fromString(""));
    this.set("royalty_percent", Value.fromI32(0));
    this.set("referralsCount", Value.fromI32(0));
    this.set("activeReferralsCount", Value.fromI32(0));
    this.set("createdAt", Value.fromI32(0));
    this.set("contract", Value.fromString(""));
    this.set("influencer", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferralProgram entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReferralProgram entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReferralProgram", id.toString(), this);
    }
  }

  static load(id: string): ReferralProgram | null {
    return changetype<ReferralProgram | null>(store.get("ReferralProgram", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get influencerId(): string {
    let value = this.get("influencerId");
    return value!.toString();
  }

  set influencerId(value: string) {
    this.set("influencerId", Value.fromString(value));
  }

  get programId(): string {
    let value = this.get("programId");
    return value!.toString();
  }

  set programId(value: string) {
    this.set("programId", Value.fromString(value));
  }

  get code(): string {
    let value = this.get("code");
    return value!.toString();
  }

  set code(value: string) {
    this.set("code", Value.fromString(value));
  }

  get royalty_percent(): i32 {
    let value = this.get("royalty_percent");
    return value!.toI32();
  }

  set royalty_percent(value: i32) {
    this.set("royalty_percent", Value.fromI32(value));
  }

  get referralsCount(): i32 {
    let value = this.get("referralsCount");
    return value!.toI32();
  }

  set referralsCount(value: i32) {
    this.set("referralsCount", Value.fromI32(value));
  }

  get activeReferralsCount(): i32 {
    let value = this.get("activeReferralsCount");
    return value!.toI32();
  }

  set activeReferralsCount(value: i32) {
    this.set("activeReferralsCount", Value.fromI32(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get influencer(): string {
    let value = this.get("influencer");
    return value!.toString();
  }

  set influencer(value: string) {
    this.set("influencer", Value.fromString(value));
  }
}

export class ReferralContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("programsCount", Value.fromI32(0));
    this.set("referralsCount", Value.fromI32(0));
    this.set("activeReferralsCount", Value.fromI32(0));
    this.set("influencersCount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferralContract entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReferralContract entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReferralContract", id.toString(), this);
    }
  }

  static load(id: string): ReferralContract | null {
    return changetype<ReferralContract | null>(
      store.get("ReferralContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get programsCount(): i32 {
    let value = this.get("programsCount");
    return value!.toI32();
  }

  set programsCount(value: i32) {
    this.set("programsCount", Value.fromI32(value));
  }

  get referralsCount(): i32 {
    let value = this.get("referralsCount");
    return value!.toI32();
  }

  set referralsCount(value: i32) {
    this.set("referralsCount", Value.fromI32(value));
  }

  get activeReferralsCount(): i32 {
    let value = this.get("activeReferralsCount");
    return value!.toI32();
  }

  set activeReferralsCount(value: i32) {
    this.set("activeReferralsCount", Value.fromI32(value));
  }

  get influencersCount(): i32 {
    let value = this.get("influencersCount");
    return value!.toI32();
  }

  set influencersCount(value: i32) {
    this.set("influencersCount", Value.fromI32(value));
  }

  get programs(): Array<string> {
    let value = this.get("programs");
    return value!.toStringArray();
  }

  set programs(value: Array<string>) {
    this.set("programs", Value.fromStringArray(value));
  }
}

export class ReferralContractInfluencer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("influencerId", Value.fromString(""));
    this.set("programsCount", Value.fromI32(0));
    this.set("referralsCount", Value.fromI32(0));
    this.set("activeReferralsCount", Value.fromI32(0));
    this.set("createdAt", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReferralContractInfluencer entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReferralContractInfluencer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReferralContractInfluencer", id.toString(), this);
    }
  }

  static load(id: string): ReferralContractInfluencer | null {
    return changetype<ReferralContractInfluencer | null>(
      store.get("ReferralContractInfluencer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get influencerId(): string {
    let value = this.get("influencerId");
    return value!.toString();
  }

  set influencerId(value: string) {
    this.set("influencerId", Value.fromString(value));
  }

  get programsCount(): i32 {
    let value = this.get("programsCount");
    return value!.toI32();
  }

  set programsCount(value: i32) {
    this.set("programsCount", Value.fromI32(value));
  }

  get referralsCount(): i32 {
    let value = this.get("referralsCount");
    return value!.toI32();
  }

  set referralsCount(value: i32) {
    this.set("referralsCount", Value.fromI32(value));
  }

  get activeReferralsCount(): i32 {
    let value = this.get("activeReferralsCount");
    return value!.toI32();
  }

  set activeReferralsCount(value: i32) {
    this.set("activeReferralsCount", Value.fromI32(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }
}

export class ReferralInfluencer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("influencerId", Value.fromString(""));
    this.set("programsCount", Value.fromI32(0));
    this.set("referralsCount", Value.fromI32(0));
    this.set("activeReferralsCount", Value.fromI32(0));
    this.set("contractsCount", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ReferralInfluencer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReferralInfluencer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReferralInfluencer", id.toString(), this);
    }
  }

  static load(id: string): ReferralInfluencer | null {
    return changetype<ReferralInfluencer | null>(
      store.get("ReferralInfluencer", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get influencerId(): string {
    let value = this.get("influencerId");
    return value!.toString();
  }

  set influencerId(value: string) {
    this.set("influencerId", Value.fromString(value));
  }

  get programsCount(): i32 {
    let value = this.get("programsCount");
    return value!.toI32();
  }

  set programsCount(value: i32) {
    this.set("programsCount", Value.fromI32(value));
  }

  get referralsCount(): i32 {
    let value = this.get("referralsCount");
    return value!.toI32();
  }

  set referralsCount(value: i32) {
    this.set("referralsCount", Value.fromI32(value));
  }

  get activeReferralsCount(): i32 {
    let value = this.get("activeReferralsCount");
    return value!.toI32();
  }

  set activeReferralsCount(value: i32) {
    this.set("activeReferralsCount", Value.fromI32(value));
  }

  get contractsCount(): i32 {
    let value = this.get("contractsCount");
    return value!.toI32();
  }

  set contractsCount(value: i32) {
    this.set("contractsCount", Value.fromI32(value));
  }

  get programs(): Array<string> {
    let value = this.get("programs");
    return value!.toStringArray();
  }

  set programs(value: Array<string>) {
    this.set("programs", Value.fromStringArray(value));
  }
}

export class ReferralInfluencerContract extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("influencerId", Value.fromString(""));
    this.set("contractId", Value.fromString(""));
    this.set("programsCount", Value.fromI32(0));
    this.set("referralsCount", Value.fromI32(0));
    this.set("activeReferralsCount", Value.fromI32(0));
    this.set("createdAt", Value.fromI32(0));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReferralInfluencerContract entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReferralInfluencerContract entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReferralInfluencerContract", id.toString(), this);
    }
  }

  static load(id: string): ReferralInfluencerContract | null {
    return changetype<ReferralInfluencerContract | null>(
      store.get("ReferralInfluencerContract", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get influencerId(): string {
    let value = this.get("influencerId");
    return value!.toString();
  }

  set influencerId(value: string) {
    this.set("influencerId", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get programsCount(): i32 {
    let value = this.get("programsCount");
    return value!.toI32();
  }

  set programsCount(value: i32) {
    this.set("programsCount", Value.fromI32(value));
  }

  get referralsCount(): i32 {
    let value = this.get("referralsCount");
    return value!.toI32();
  }

  set referralsCount(value: i32) {
    this.set("referralsCount", Value.fromI32(value));
  }

  get activeReferralsCount(): i32 {
    let value = this.get("activeReferralsCount");
    return value!.toI32();
  }

  set activeReferralsCount(value: i32) {
    this.set("activeReferralsCount", Value.fromI32(value));
  }

  get createdAt(): i32 {
    let value = this.get("createdAt");
    return value!.toI32();
  }

  set createdAt(value: i32) {
    this.set("createdAt", Value.fromI32(value));
  }
}

export class Referral extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("influencerId", Value.fromString(""));
    this.set("programId", Value.fromString(""));
    this.set("accountId", Value.fromString(""));
    this.set("contract", Value.fromString(""));
    this.set("influencer", Value.fromString(""));
    this.set("program", Value.fromString(""));
    this.set("account", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Referral entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Referral entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Referral", id.toString(), this);
    }
  }

  static load(id: string): Referral | null {
    return changetype<Referral | null>(store.get("Referral", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get influencerId(): string {
    let value = this.get("influencerId");
    return value!.toString();
  }

  set influencerId(value: string) {
    this.set("influencerId", Value.fromString(value));
  }

  get programId(): string {
    let value = this.get("programId");
    return value!.toString();
  }

  set programId(value: string) {
    this.set("programId", Value.fromString(value));
  }

  get accountId(): string {
    let value = this.get("accountId");
    return value!.toString();
  }

  set accountId(value: string) {
    this.set("accountId", Value.fromString(value));
  }

  get contract(): string {
    let value = this.get("contract");
    return value!.toString();
  }

  set contract(value: string) {
    this.set("contract", Value.fromString(value));
  }

  get influencer(): string {
    let value = this.get("influencer");
    return value!.toString();
  }

  set influencer(value: string) {
    this.set("influencer", Value.fromString(value));
  }

  get program(): string {
    let value = this.get("program");
    return value!.toString();
  }

  set program(value: string) {
    this.set("program", Value.fromString(value));
  }

  get account(): string {
    let value = this.get("account");
    return value!.toString();
  }

  set account(value: string) {
    this.set("account", Value.fromString(value));
  }
}

export class ReferralProgramProfit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("contractId", Value.fromString(""));
    this.set("influencerId", Value.fromString(""));
    this.set("ftTokenId", Value.fromString(""));
    this.set("amount", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReferralProgramProfit entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReferralProgramProfit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReferralProgramProfit", id.toString(), this);
    }
  }

  static load(id: string): ReferralProgramProfit | null {
    return changetype<ReferralProgramProfit | null>(
      store.get("ReferralProgramProfit", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get contractId(): string {
    let value = this.get("contractId");
    return value!.toString();
  }

  set contractId(value: string) {
    this.set("contractId", Value.fromString(value));
  }

  get influencerId(): string {
    let value = this.get("influencerId");
    return value!.toString();
  }

  set influencerId(value: string) {
    this.set("influencerId", Value.fromString(value));
  }

  get ftTokenId(): string {
    let value = this.get("ftTokenId");
    return value!.toString();
  }

  set ftTokenId(value: string) {
    this.set("ftTokenId", Value.fromString(value));
  }

  get amount(): string {
    let value = this.get("amount");
    return value!.toString();
  }

  set amount(value: string) {
    this.set("amount", Value.fromString(value));
  }
}
