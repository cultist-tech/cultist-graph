type _Schema_
    @fulltext(
        name: "tokenSearch"
        language: en
        algorithm: rank
        include: [{ entity: "Token", fields: [{ name: "ownerId" }] }]
    )

#

type Statistic @entity {
    id: ID!

    nftTransferTotal: Int!
    nftPayTotal: Int!
    nftBurnTotal: Int!
    nftTotal: Int!

    marketSaleTotal: Int!
    marketSaleNearFloor: String!
    marketSaleNearSum: String!
    marketSaleNearTotal: Int!

    marketRentTotal: Int!
    marketRentNearFloor: String!
    marketRentNearSum: String!
    marketRentNearTotal: Int!

    accountTotal: Int!
    transactionTotal: Int!
}

#

type AccountStat @entity  {
    id: ID!

    nftTransferTotal: Int!
    nftBuyTotal: Int!
    nftSellTotal: Int!
    nftBurnTotal: Int!
    nftTotal: Int!
    nftUpgradeTotal: Int!

    marketSaleTotal: Int!
    marketSaleNearFloor: String!
    marketSaleNearSum: String!
    marketSaleNearTotal: Int!
    marketReputation: Int!

    marketRentTotal: Int!
    marketRentNearFloor: String!
    marketRentNearSum: String!
    marketRentNearTotal: Int!

    transactionTotal: Int!
}

type Account @entity {
    id: ID!

    tokens: [Token!]! @derivedFrom(field: "owner")
    marketSales: [MarketSale!]! @derivedFrom(field: "owner")
    marketRents: [MarketRent!]! @derivedFrom(field: "owner")
    ftBalances: [FtBalance!]! @derivedFrom(field: "owner")
}

type AccountRoyalty @entity {
    id: ID!

    accountId: ID!
    account: Account!
    ftTokenId: ID!
    amount: String!
}

# contract

type NftContract @entity {
    id: ID!
}

type ContractStat @entity  {
    id: ID!

    nftTransferTotal: Int!
    nftBuyTotal: Int!
    nftSellTotal: Int!
    nftBurnTotal: Int!
    nftTotal: Int!
    nftUpgradeTotal: Int!

    marketSaleTotal: Int!
    marketSaleNearFloor: String!
    marketSaleNearSum: String!
    marketSaleNearTotal: Int!

    marketRentTotal: Int!
    marketRentNearFloor: String!
    marketRentNearSum: String!
    marketRentNearTotal: Int!

    transactionTotal: Int!
    accountTotal: Int!
    reputationTotal: Int!
}


# nft

type Token @entity {
    id: ID!
    tokenId: String!
    contractId: ID!

    rarity: Int
    bindToOwner: Boolean!

    createdAt: BigInt!
    revealAt: Int

    #

    ownerId: ID!
    tokenMetadataId: ID!
    rentId: ID
    saleId: ID
    fractionationId: ID
    nftIdoId: ID

    owner: Account!
    tokenMetadata: TokenMetadata!

    rent: MarketRent
    sale: MarketSale
    fractionation: NftFractionation
    nftIdo: NftIdo

    nftUpgrade: TokenUpgrade
    nftBurner: TokenBurner
    nftUpgradeId: ID
    nftBurnerId: ID

    royalty: [TokenRoyalty!]! @derivedFrom(field: "token")
    stats: [TokenStat!]! @derivedFrom(field: "token")
}

type TokenMetadata @entity {
    id: ID!
    title: String
    description: String
    media: String

    #

    tokenId: String!
}

type TokenRoyalty @entity {
    id: ID!
    tokenId: ID!
    accountId: String!
    value: Int!

    token: Token!
}

type TokenStat @entity {
    id: ID!
    tokenId: ID!
    token: Token!
    key: String!
    value: String!
}

type TokenUpgrade @entity {
    id: ID!
    rarity: Int!
    ftTokenId: ID!
    price: String!
}

type TokenBurner @entity {
    id: ID!
    rarity: Int!
    rarity_sum: Int!
}

# rent

type MarketRent @entity {
    id: ID!
    contractId: ID!
    tokenId: ID!
    ownerId: ID!

    minTime: Int!
    maxTime: Int!
    endedAt: Int
    createdAt: BigInt!
    renterId: ID

    owner: Account!
    token: Token!
    conditions: [MarketRentCondition!]! @derivedFrom(field: "rent")
}

type MarketRentCondition @entity {
    id: ID!
    ftTokenId: ID!
    price: String!

    rent: MarketRent!
    rentId: ID!
}

# market

type MarketSale @entity {
    id: ID!
    ownerId: ID!
    contractId: ID!
    tokenId: ID!

    isAuction: Boolean!
    createdAt: BigInt!

    owner: Account!
    token: Token!
    isDeleted: Boolean!
    conditions: [MarketSaleCondition!]! @derivedFrom(field: "sale")
}

type MarketSaleCondition @entity {
    id: ID!
    ftTokenId: ID!
    price: String!

    sale: MarketSale!
    saleId: ID!
}

# ft

type FtBalance @entity {
    id: ID!
    contractId: ID!
    accountId: ID!

    balance: BigInt!
    owner: Account!
}

# nft-ido

type NftIdo @entity {
    id: ID!

    idoId: ID!
    contractId: ID!

    name: String!
    media: String
    amount: Int
    price: String!
    buyMax: Int!
    perTransactionMin: Int!
    perTransactionMax: Int!

    amountReady: Int!
    notMinted: Int!
    locked: Boolean!
    startDate: Int
    ftToken: String

    tokens: [Token!]! @derivedFrom(field: "nftIdo")
}

# nft-fractionation

type NftFractionation @entity {
    id: ID!

    contractId: ID!
    tokenId: ID!

    createdAt: BigInt!
    competedAt: BigInt
    competedBy: ID

    token: Token
    parts: [NftFractionationPart!]! @derivedFrom(field: "fractionation")
}

type NftFractionationPart @entity {
    id: ID!

    contractId: ID!
    tokenId: ID!
    ownerId: ID
    fractionation: NftFractionation!

    token: Token
}

# referral

type Referral @entity {
    id: ID!

    contractId: ID!
    influencerId: ID!
    programId: ID!
    accountId: ID!

    payoutCount: Int!
    payoutNear: String!

    contract: ReferralContract!
    influencer: ReferralInfluencer!
    program: ReferralProgram!
    account: Account!

    createdAt: BigInt!
}

type ReferralProgram @entity {
    id: ID!

    contractId: ID!
    influencerId: ID!
    programId: ID!

    code: String!
    royalty_percent: Int!
    title: String
    description: String
    media: String
    url: String

    referralsCount: Int!
    activeReferralsCount: Int!
    payoutCount: Int!
    payoutNear: String!

    createdAt: BigInt!

    contract: ReferralContract!
    influencer: ReferralInfluencer!
}

type ReferralContract @entity {
    id: ID!

    contractId: ID!

    influencersCount: Int!

    programsCount: Int!
    referralsCount: Int!
    activeReferralsCount: Int!
    payoutCount: Int!
    payoutNear: String!

    createdAt: BigInt!

    programs: [ReferralProgram!]! @derivedFrom(field: "contract")
}

type ReferralContractInfluencer @entity {
    id: ID!

    contractId: ID!
    influencerId: ID!

    programsCount: Int!
    referralsCount: Int!
    activeReferralsCount: Int!
    payoutCount: Int!
    payoutNear: String!

    createdAt: BigInt!
}

type ReferralInfluencer @entity {
    id: ID!

    influencerId: ID!

    contractsCount: Int!

    programsCount: Int!
    referralsCount: Int!
    activeReferralsCount: Int!
    payoutCount: Int!
    payoutNear: String!

    createdAt: BigInt!

    programs: [ReferralProgram!]! @derivedFrom(field: "influencer")
}

type ReferralInfluencerContract @entity {
    id: ID!

    influencerId: ID!
    contractId: ID!

    programsCount: Int!
    referralsCount: Int!
    activeReferralsCount: Int!
    payoutCount: Int!
    payoutNear: String!

    createdAt: BigInt!
}

type ReferralProgramVolume @entity {
    id: ID!

    contractId: ID!
    influencerId: ID!
    programId: ID!

    ftTokenId: ID!
    amount: String!
}

type ReferralContractVolume @entity {
    id: ID!

    contractId: ID!

    ftTokenId: ID!
    amount: String!
}

type ReferralInfluencerVolume @entity {
    id: ID!

    influencerId: ID!

    ftTokenId: ID!
    amount: String!
}

# reputation

type Reputation @entity {
    id: ID!
    contractId: ID!
    accountId: ID!
    value: Int!
}

# logger

type Log @entity {
    id: ID!

    key: String!
    message: String!
}
